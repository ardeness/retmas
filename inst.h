#ifndef _INST_H_
#define _INST_H_
#include <elf.h>

#define RELOC_AT_DISPLACEMENT 0
#define RELOC_AT_IMMEDIATE 1
typedef enum _insttype
{
	INSTTYPE_INVAL,
	INSTTYPE_NORMAL,
	INSTTYPE_CALL,
	INSTTYPE_RET,
	INSTTYPE_JMP,
	INSTTYPE_JCC,
	INSTTYPE_NOP,
	INSTTYPE_IO,
	INSTTYPE_CONTROL,
	INSTTYPE_CONVERT,
	INSTTYPE_WAIT,
	INSTTYPE_BRANCH,
	INSTTYPE_LEAVE,
	INSTTYPE_INT,
	INSTTYPE_INTO,
	INSTTYPE_FLOAT,
	INSTTYPE_UNDEFINE,
	INSTTYPE_SET
} Insttype;

typedef enum _instcode
{
	INSTCODE_INVAL,
	INSTCODE_PUSH,
	INSTCODE_CALL,
	INSTCODE_CALLF,
	INSTCODE_MOV,
	INSTCODE_AND,
	INSTCODE_CMP,
	INSTCODE_JO,
	INSTCODE_JNO,
	INSTCODE_JB,
	INSTCODE_JAE,
	INSTCODE_JE,
	INSTCODE_JNE,
	INSTCODE_JBE,
	INSTCODE_JA,
	INSTCODE_JS,
	INSTCODE_JNS,
	INSTCODE_JPE,
	INSTCODE_JPO,
	INSTCODE_JL,
	INSTCODE_JGE,
	INSTCODE_JLE,
	INSTCODE_JG,
	INSTCODE_OR,
	INSTCODE_SAL,
	INSTCODE_ADD,
	INSTCODE_XOR,
	INSTCODE_MOVZX,
	INSTCODE_JMP,
	INSTCODE_RET,
	INSTCODE_SHR,
	INSTCODE_INC,
	INSTCODE_SETO,
	INSTCODE_SETNO,
	INSTCODE_SETB,
	INSTCODE_SETAE,
	INSTCODE_SETE,
	INSTCODE_SETNE,
	INSTCODE_SETBE,
	INSTCODE_SETA,
	INSTCODE_SETS,
	INSTCODE_SETNS,
	INSTCODE_SETPE,
	INSTCODE_SETPO,
	INSTCODE_SETL,
	INSTCODE_SETGE,
	INSTCODE_SETLE,
	INSTCODE_SETG,
	INSTCODE_POP,
	INSTCODE_LEA,
	INSTCODE_TEST,
	INSTCODE_DEC,
	INSTCODE_NEG,
	INSTCODE_SBB,
	INSTCODE_SUB,
	INSTCODE_NOT,
	INSTCODE_REP_MOVSW,
	INSTCODE_REP_MOVSD,
	INSTCODE_STD,
	INSTCODE_CLD,
	INSTCODE_INT3,
	INSTCODE_XCHG,
	INSTCODE_LEAVE,
	INSTCODE_IMUL,
	INSTCODE_SAR,
	INSTCODE_MOVSX,
	INSTCODE_MOVSW,
	INSTCODE_MOVSD,
	INSTCODE_CWD,
	INSTCODE_CDQ,
	INSTCODE_REPE_CMPSB,
	INSTCODE_MOVSB,
	INSTCODE_INT,
	INSTCODE_STOSW,
	INSTCODE_STOSD,
	INSTCODE_IDIV,
	INSTCODE_REP_STOSW,
	INSTCODE_REP_STOSD,
	INSTCODE_ADC,
	INSTCODE_MUL,
	INSTCODE_LOCK,
	INSTCODE_XADD,
	INSTCODE_CLI,
	INSTCODE_DIV,
	INSTCODE_NOP,
	INSTCODE_SHRD,
	INSTCODE_REP_MOVSB,
	INSTCODE_RCR,
	INSTCODE_IN,
	INSTCODE_REPE_CMPSW,
	INSTCODE_REPE_CMPSD,
	INSTCODE_ENTER,
	INSTCODE_STC,
	INSTCODE_CMC,
	INSTCODE_POPAW,
	INSTCODE_POPAD,
	INSTCODE_BOUND,
	INSTCODE_INSW,
	INSTCODE_INSD,
	INSTCODE_INSB,
	INSTCODE_AAA,
	INSTCODE_REPNE_SCASB,
	INSTCODE_ROL,
	INSTCODE_INT1,
	INSTCODE_RCL,
	INSTCODE_AAM,
	INSTCODE_REP_STOSB,
	INSTCODE_DAS,
	INSTCODE_LES,
	INSTCODE_RETF,
	INSTCODE_IRETW,
	INSTCODE_IRETD,
	INSTCODE_STOSB,
	INSTCODE_OUTSB,
	INSTCODE_PUSHAW,
	INSTCODE_PUSHAD,
	INSTCODE_LOOPNZ,
	INSTCODE_SALC,
	INSTCODE_CLC,
	INSTCODE_ROR,
	INSTCODE_OUTSW,
	INSTCODE_OUTSD,
	INSTCODE_HLT,
	INSTCODE_JCXZ,
	INSTCODE_JECXZ,
	INSTCODE_PUSHFW,
	INSTCODE_PUSHFD,
	INSTCODE_SCASW,
	INSTCODE_SCASD,
	INSTCODE_BTS,
	INSTCODE_BT,
	INSTCODE_LDS,
	INSTCODE_AAD,
	INSTCODE_OUT,
	INSTCODE_LOOP,
	INSTCODE_INTO,
	INSTCODE_SAHF,
	INSTCODE_LOOPZ,
	INSTCODE_POPFW,
	INSTCODE_POPFD,
	INSTCODE_AAS,
	INSTCODE_LODSW,
	INSTCODE_LODSD,
	INSTCODE_XLATB,
	INSTCODE_STI,
	INSTCODE_CBW,
	INSTCODE_CWDE,
	INSTCODE_SHLD,
	INSTCODE_CMPSW,
	INSTCODE_CMPSD,
	INSTCODE_CMPSB,
	INSTCODE_LAHF,
	INSTCODE_LODSB,
	INSTCODE_REPNE_CMPSB,
	INSTCODE_REPNE_CMPSW,
	INSTCODE_REPNE_CMPSD,
	INSTCODE_REPNE_SCASW,
	INSTCODE_REPNE_SCASD,
	INSTCODE_LAR,
	INSTCODE_SCASB,
	INSTCODE_DAA,
	// co-processor instruction
	INSTCODE_X87,
	// added 2009.1.14
	INSTCODE_SLDT,
	INSTCODE_STR,
	INSTCODE_LTR,
	INSTCODE_VERR,
	INSTCODE_VERW,
	INSTCODE_SGDT,
	INSTCODE_SIDT,
	INSTCODE_LGDT,
	INSTCODE_LIDT,
	INSTCODE_SMSW,
	INSTCODE_LMSW,
	INSTCODE_INVLPG,
	INSTCODE_MONITOR,
	INSTCODE_LSL,
	INSTCODE_CLTS,
	INSTCODE_INVD,
	INSTCODE_UD2,
	INSTCODE_LLDT,
	INSTCODE_MWAIT,
	INSTCODE_WBINVD,
	INSTCODE_ARPL,
	INSTCODE_INS,
	INSTCODE_OUTS,
	INSTCODE_JCC,
	INSTCODE_PAUSE,
	INSTCODE_STORE,
	INSTCODE_LOAD,
	INSTCODE_SCAN,
	INSTCODE_SHL,
	INSTCODE_XLAT,
	INSTCODE_FCOM,
	INSTCODE_FCOMP,
	INSTCODE_FADD,
	INSTCODE_FMUL,
	INSTCODE_FSUB,
	INSTCODE_FSUBR,
	INSTCODE_FDIV,
	INSTCODE_FDIVR,
	INSTCODE_FXCH,
	INSTCODE_FNOP,
	INSTCODE_FCHS,
	INSTCODE_FABS,
	INSTCODE_FTST,
	INSTCODE_FXAM,
	INSTCODE_FLD1,
	INSTCODE_FLDL2T,
	INSTCODE_FLDL2E,
	INSTCODE_FLDPI,
	INSTCODE_FLDLG2,
	INSTCODE_FLDLN2,
	INSTCODE_FLDZ,
	INSTCODE_F2XM1,
	INSTCODE_FYL2X,
	INSTCODE_FPTAN,
	INSTCODE_FPATAN,
	INSTCODE_FXTRACT,
	INSTCODE_FPREM1,
	INSTCODE_FINCSTP,
	INSTCODE_FPREM,
	INSTCODE_FLY2XP1,
	INSTCODE_FSQRT,
	INSTCODE_FSINCOS,
	INSTCODE_FRNDINT,
	INSTCODE_FSCALE,
	INSTCODE_FSIN,
	INSTCODE_FCOS,
	INSTCODE_FLD,
	INSTCODE_FST,
	INSTCODE_FSTP,
	INSTCODE_FLDENV,
	INSTCODE_FLDCW,
	INSTCODE_FSTENV,
	INSTCODE_FNSTENV,
	INSTCODE_FNSTCW,
	INSTCODE_FUCOMPP,
	INSTCODE_FIADD,
	INSTCODE_FIMUL,
	INSTCODE_FICOM,
	INSTCODE_FICOMP,
	INSTCODE_FISUB,
	INSTCODE_FISUBR,
	INSTCODE_FIDIV,
	INSTCODE_FNENI,
	INSTCODE_FNDISI,
	INSTCODE_FCLEX,
	INSTCODE_FINIT,
	INSTCODE_FNINIT,
	INSTCODE_FNSETPM,
	INSTCODE_FILD,
	INSTCODE_FISTTP,
	INSTCODE_FIST,
	INSTCODE_FISTP,
	INSTCODE_FCOMI,
	INSTCODE_FUCOM,
	INSTCODE_FUCOMP,
	INSTCODE_FRSTOR,
	INSTCODE_FNSAVE,
	INSTCODE_FNSTWSW,
	INSTCODE_FADDP,
	INSTCODE_FMULP,
	INSTCODE_FCOMPP,
	INSTCODE_FSUBRP,
	INSTCODE_FSUBP,
	INSTCODE_FDIVRP,
	INSTCODE_FDIVP,
	INSTCODE_FIDIVR,
	INSTCODE_FSTSW,
	INSTCODE_FNSTSW,
	INSTCODE_FBLD,
	INSTCODE_FBSTP,
	INSTCODE_LOOPNE,
	INSTCODE_LOOPE,
	INSTCODE_JRCXZ,
	INSTCODE_HALT,
	INSTCODE_SYSCALL,
	INSTCODE_SYSRET,
	INSTCODE_UNDEFINE,
	INSTCODE_MOVSS,
	INSTCODE_MOVUPD,
	INSTCODE_MOVUPS,
	INSTCODE_MOVLPD,
	INSTCODE_MOVDDUP,
	INSTCODE_MOVSLDUP,
	INSTCODE_MOVHLPS,
	INSTCODE_MOVLPS,
	INSTCODE_UNPCKLPD,
	INSTCODE_UNPCKLPS,
	INSTCODE_MOVLHPS,
	INSTCODE_MOVHPS,
	INSTCODE_MOVHPD,
	INSTCODE_MOVSHDUP,
	INSTCODE_PREFETCHNTA,
	INSTCODE_PREFETCH0,
	INSTCODE_PREFETCH1,
	INSTCODE_PREFETCH2,
	INSTCODE_MOVAPD,
	INSTCODE_MOVAPS,
	INSTCODE_CVTSI2SS,
	INSTCODE_CVTPI2PD,
	INSTCODE_CVTSI2SD,
	INSTCODE_CVTPI2PS,
	INSTCODE_MOVNTPD,
	INSTCODE_MOVNTPS,
	INSTCODE_CVTTSS2SI,
	INSTCODE_CVTTPD2PI,
	INSTCODE_CVTTSD2SI,
	INSTCODE_CVTTPS2PI,
	INSTCODE_CVTPS2PI,
	INSTCODE_CVTPD2PI,
	INSTCODE_CVTSD2SI,
	INSTCODE_UCOMISD,
	INSTCODE_UCOMISS,
	INSTCODE_COMISD,
	INSTCODE_COMISS,
	INSTCODE_WRMSR,
	INSTCODE_RDTSC,
	INSTCODE_RDMSR,
	INSTCODE_RDPMC,
	INSTCODE_SYSENTER,
	INSTCODE_SYSEXIT,
	INSTCODE_PSHUFB,
	INSTCODE_PHADDW,
	INSTCODE_PHADDD,
	INSTCODE_PHADDSW,
	INSTCODE_PMADDUBSW,
	INSTCODE_PHSUBW,
	INSTCODE_PHSUBD,
	INSTCODE_PHSUBSW,
	INSTCODE_PSIGNB,
	INSTCODE_PSIGNW,
	INSTCODE_PSIGND,
	INSTCODE_PMULHRSW,
	INSTCODE_PABSB,
	INSTCODE_PABSW,
	INSTCODE_PABSD,
	INSTCODE_CMOVO,
	INSTCODE_CMOVNO,
	INSTCODE_CMOVB,
	INSTCODE_CMOVNB,
	INSTCODE_CMOVZ,
	INSTCODE_CMOVNZ,
	INSTCODE_CMOVBE,
	INSTCODE_CMOVNBE,
	INSTCODE_CMOVS,
	INSTCODE_CMOVNS,
	INSTCODE_CMOVP,
	INSTCODE_CMOVNP,
	INSTCODE_CMOVL,
	INSTCODE_CMOVNL,
	INSTCODE_CMOVLE,
	INSTCODE_CMOVNLE,
	INSTCODE_MOVMSKPD,
	INSTCODE_MOVMSKPS,
	INSTCODE_SQRTSS,
	INSTCODE_SQRTPD,
	INSTCODE_SQRTSD,
	INSTCODE_SQRTPS,
	INSTCODE_RSQRTSS,
	INSTCODE_RSQRTPS,
	INSTCODE_RCPSS,
	INSTCODE_RPCPS,
	INSTCODE_ANDPD,
	INSTCODE_ANDPS,
	INSTCODE_ANDNPD,
	INSTCODE_ANDNPS,
	INSTCODE_ORPD,
	INSTCODE_ORPS,
	INSTCODE_XORPD,
	INSTCODE_XORPS,
	INSTCODE_ADDSS,
	INSTCODE_ADDPD,
	INSTCODE_ADDSD,
	INSTCODE_ADDPS,
	INSTCODE_MULSS,
	INSTCODE_MULPD,
	INSTCODE_MULSD,
	INSTCODE_MULPS,
	INSTCODE_CVTPD2PS,
	INSTCODE_CVTSS2SD,
	INSTCODE_CVTSD2SS,
	INSTCODE_CVTPS2DQ,
	INSTCODE_CVTTPS2DQ,
	INSTCODE_CVTDQ2PS,
	INSTCODE_SUBSS,
	INSTCODE_SUBPD,
	INSTCODE_SUBSD,
	INSTCODE_SUBPS,
	INSTCODE_MINSS,
	INSTCODE_MINPD,
	INSTCODE_MINSD,
	INSTCODE_MINPS,
	INSTCODE_DIVSS,
	INSTCODE_DIVPD,
	INSTCODE_DIVSD,
	INSTCODE_DIVPS,
	INSTCODE_MAXSS,
	INSTCODE_MAXPD,
	INSTCODE_MAXSD,
	INSTCODE_MAXPS,
	INSTCODE_PUNPCKLBW,
	INSTCODE_PUNPCKLWD,
	INSTCODE_PUNPCKLDQ,
	INSTCODE_PACKSSWB,
	INSTCODE_PCMPGTB,
	INSTCODE_PCMPGTW,
	INSTCODE_PCMPGTD,
	INSTCODE_PACKUSWB,
	INSTCODE_PUNPCKHBW,
	INSTCODE_PUNPCKHWD,
	INSTCODE_PUNPCKHDQ,
	INSTCODE_PACKSSDW,
	INSTCODE_PUNPCKLQDQ,
	INSTCODE_PUNPCKHQDQ,
	INSTCODE_MOVD,
	INSTCODE_MOVDQA,
	INSTCODE_MOVDQU,
	INSTCODE_MOVQ,
	INSTCODE_PSHUFLW,
	INSTCODE_PSHUFHW,
	INSTCODE_PSHUFD,
	INSTCODE_PSHUFW,
	INSTCODE_PSRLW,
	INSTCODE_PSRAW,
	INSTCODE_PSLLW,
	INSTCODE_PSRLD,
	INSTCODE_PSRAD,
	INSTCODE_PSLLD,
	INSTCODE_PSRLQ,
	INSTCODE_PSRLDQ,
	INSTCODE_PSLLQ,
	INSTCODE_PSLLDQ,
	INSTCODE_PCMPEQB,
	INSTCODE_PCMPEQW,
	INSTCODE_PCMPEQD,
	INSTCODE_EMMS,
	INSTCODE_HADDPD,
	INSTCODE_HADDPS,
	INSTCODE_HSUBPD,
	INSTCODE_JNB,
	INSTCODE_JZ,
	INSTCODE_JNZ,
	INSTCODE_JNBE,
	INSTCODE_JP,
	INSTCODE_JNP,
	INSTCODE_JNL,
	INSTCODE_JNLE,
	INSTCODE_SETNB,
	INSTCODE_SETZ,
	INSTCODE_SETNZ,
	INSTCODE_SETNBE,
	INSTCODE_SETP,
	INSTCODE_SETNP,
	INSTCODE_SETNL,
	INSTCODE_SETNLE,
	INSTCODE_CPUID,
	INSTCODE_RSM,
	INSTCODE_FXSAVE,
	INSTCODE_FXRSTOR,
	INSTCODE_LDMXCSR,
	INSTCODE_STMXCSR,
	INSTCODE_LFENCE,
	INSTCODE_MFENCE,
	INSTCODE_SFENCE,
	INSTCODE_CMPXCHG,
	INSTCODE_LSS,
	INSTCODE_BTR,
	INSTCODE_LFS,
	INSTCODE_LGS,
	INSTCODE_BTC,
	INSTCODE_BSF,
	INSTCODE_BSR,
	INSTCODE_CMPSS,
	INSTCODE_CMPPD,
	INSTCODE_CMPPS,
	INSTCODE_MOVNTI,
	INSTCODE_PINSRW,
	INSTCODE_PEXTRW,
	INSTCODE_SHUFPD,
	INSTCODE_SHUFPS,
	INSTCODE_BSWAP,
	INSTCODE_ADDSUBPD,
	INSTCODE_ADDSUBPS,
	INSTCODE_PADDQ,
	INSTCODE_PMULLW,
	INSTCODE_MOVQ2DQ,
	INSTCODE_MOVDQ2Q,
	INSTCODE_PMOVMSKB,
	INSTCODE_PSUBUSB,
	INSTCODE_PSUBUSW,
	INSTCODE_PMINUB,
	INSTCODE_PAND,
	INSTCODE_PADDUSB,
	INSTCODE_PADDUSW,
	INSTCODE_PMAXUB,
	INSTCODE_PANDN,
	INSTCODE_PAVGB,
	INSTCODE_PAVGW,
	INSTCODE_PMULHUW,
	INSTCODE_PMULHW,
	INSTCODE_CVTPD2DQ,
	INSTCODE_CVTTPD2DQ,
	INSTCODE_CVTDQ2PD,
	INSTCODE_MOVNTDQ,
	INSTCODE_MOVNTQ,
	INSTCODE_PSUBSB,
	INSTCODE_PSUBSW,
	INSTCODE_PMINSW,
	INSTCODE_POR,
	INSTCODE_PADDSB,
	INSTCODE_PADDSW,
	INSTCODE_PMAXSW,
	INSTCODE_PXOR,
	INSTCODE_LDDQU,
	INSTCODE_PMULUDQ,
	INSTCODE_PMADDWD,
	INSTCODE_PSADBW,
	INSTCODE_MASKMOVDQU,
	INSTCODE_MASKMOVQ,
	INSTCODE_PSUBB,
	INSTCODE_PSUBW,
	INSTCODE_PSUBD,
	INSTCODE_PSUBQ,
	INSTCODE_PADDB,
	INSTCODE_PADDW,
	INSTCODE_PADDD
} Instcode;

typedef struct _instruction Instruction;
struct _instruction
{
	unsigned short isAdded;
	unsigned short blockSize;
	unsigned short section_index;

	unsigned long absolute_address;
	
	unsigned long offset;

	int instruction_type;
	int instruction_code;

	int isRelocationlist;

	unsigned char prefix[4];
	unsigned char opcode[3];
	unsigned char modrm;
	unsigned char sib;
	unsigned char displacement[4];
	unsigned char immediate[4];

	unsigned short prefix_size;
	unsigned short opcode_size;
	unsigned short modrm_size;
	unsigned short sib_size;
	unsigned short displacement_size;
	unsigned short immediate_size;
	unsigned short instruction_size;

	Instruction *prev;
	Instruction *next;

};

typedef struct _jumptarget Jumptarget;
struct _jumptarget
{

	Instruction *target_instruction;
	Instruction **refering_instruction;

	unsigned short ref_count;

	Jumptarget *prev;
	Jumptarget *next;

};

typedef struct _symbollist Symbollist;
struct _symbollist
{
	int symbolindex;
	Elf32_Sym symbolinfo;
	
	Instruction *start_instruction;
	Instruction *end_instruction;

	Symbollist *prev;
	Symbollist *next;
};

typedef struct _relocationlist Relocationlist;
struct _relocationlist
{
	Elf32_Rel relocationinfo;

	int position;

	Symbollist *refering_symbol;

	Instruction *modifying_instruction;
	Instruction *refering_instruction;

	char *modifying_target;
	char *refering_target;

	unsigned short offset_in_instruction;

	Relocationlist *prev;
	Relocationlist *next;
};

typedef struct _sectionlist Sectionlist;
struct _sectionlist
{
	int sectionindex;
	char *sectioncontents;
	Elf32_Shdr sectionHeader;
	Instruction *instructionhead;
	Symbollist *symbolhead;
	Relocationlist *relocationhead;
	Jumptarget *jHead;
};
#define readbyte(p) (*(signed char *)(p) )
#define readword(p) ((*(signed char *)(p) & 0xFF ) | ((*(signed char *)(p + 1) << 8 ) & 0xFFFFFF00)	)
#define readdword(p) ((*(signed char *)(p) & 0xFF ) | (( *(signed char *)(p + 1) << 8 ) & 0xFF00) | (( *(signed char *)(p + 2) << 16 ) & 0xFF0000) | (( *(signed char *)(p + 3) << 24 ) & 0xFF000000))


#define BYTE		1	// byte size : 8bit
#define HALFWORD	2	// haltword size : 16bit
#define WORD 		4	// word size : 32bit
#define DOUBLEWORD	8	// doubleword size : 64bit

int parse_instruction(Instruction **disasmHead, Elf32_Shdr *sectionHeader, int i, char *elfimage);
void printOneInstruction(Instruction *current);
void printInst(Instruction *instHead);
Instruction *findInstructionbyOffset(Instruction *iHead, long offset);
Instruction *findInstructionbyUncertainOffset(Instruction *iHead, long offset);

Instruction* create_inst(unsigned char **_byte, unsigned char *_endbyte, Instruction *src);
void modOpcode(unsigned char **byte, unsigned char *endbyte, Instruction *inst, int size);
void modModRMParams(unsigned char **byte, unsigned char *endbyte, Instruction *inst, char expected_reg);
void modImmediate(unsigned char **byte, unsigned char *endbyte, Instruction *inst, int size);
void modDisplacement(unsigned char **byte, unsigned char *endbyte, Instruction *inst, int size);
void modPrefix(unsigned char **byte, unsigned char *endbyte, Instruction *inst);

#endif
